const { ApplicationCommandOptionType, EmbedBuilder } = require("discord.js");
const axios = require('axios');

// API Endpoint (ƒêI·ªÇM TRUY C·∫¨P API) c·ªßa Waifu.pics
const API_BASE_URL = 'https://api.waifu.pics/sfw/'; 

// ----------------------------------------------------------------------
// --- H√ÄM L·∫§Y H√åNH ·∫¢NH WAIFU/HUSBANDO T·ª™ API (FIX L·ªñI 404) --------------
// ----------------------------------------------------------------------
async function fetchRandomCharacter(type) {
    let endpoint;
    let title;
    
    if (type === 'waifu') {
        endpoint = 'waifu'; // SFW endpoint h·ª£p l·ªá
        title = 'üå∏ Waifu Ng·∫´u Nhi√™n';
    } else if (type === 'husbando') {
        // üî• FIX 404: Endpoint 'husbando' kh√¥ng t·ªìn t·∫°i trong SFW.
        // Chuy·ªÉn sang m·ªôt SFW endpoint kh√°c (v√≠ d·ª•: 'lick') ho·∫∑c 'neko' (m√®o)
        endpoint = 'lick'; // Ch·ªçn m·ªôt h√†nh ƒë·ªông an to√†n, trung l·∫≠p v√† t·ªìn t·∫°i trong API
        title = 'üíñ L√£ng M·∫°n Ng·∫´u Nhi√™n (Husbando T·∫°m Th·ªùi)';
    } else {
        throw new Error("Lo·∫°i nh√¢n v·∫≠t kh√¥ng h·ª£p l·ªá.");
    }

    // S·ª≠ d·ª•ng GET method ƒë√£ ƒë∆∞·ª£c s·ª≠a ·ªü l·∫ßn tr∆∞·ªõc
    const response = await axios.get(`${API_BASE_URL}${endpoint}`);

    // D·ªØ li·ªáu tr·∫£ v·ªÅ th∆∞·ªùng l√† { "url": "..." }
    if (response.data && response.data.url) {
        return { url: response.data.url, title: title };
    }
    
    throw new Error("API kh√¥ng tr·∫£ v·ªÅ URL h√¨nh ·∫£nh h·ª£p l·ªá.");
}

// ----------------------------------------------------------------------
// --- C·∫§U TR√öC L·ªÜNH CH√çNH (/character v√† c√°c t√πy ch·ªçn) ------------------
// ----------------------------------------------------------------------

module.exports.data = {
    name: "character", 
    description: "L·∫•y m·ªôt h√¨nh ·∫£nh nh√¢n v·∫≠t anime ng·∫´u nhi√™n (Waifu an to√†n ho·∫∑c L√£ng M·∫°n).",
    type: 1, 
    options: [
        {
            name: "chon_loai",
            description: "Ch·ªçn lo·∫°i nh√¢n v·∫≠t b·∫°n mu·ªën xem.",
            type: ApplicationCommandOptionType.String,
            required: true, 
            choices: [
                { name: 'Waifu (N·ªØ - SFW)', value: 'waifu' },
                // T√™n ƒë∆∞·ª£c thay ƒë·ªïi ƒë·ªÉ ph·∫£n √°nh s·ª± thay ƒë·ªïi API, tr√°nh g√¢y nh·∫ßm l·∫´n
                { name: 'H√†nh ƒë·ªông L√£ng M·∫°n (Thay th·∫ø Husbando)', value: 'husbando' }, 
            ]
        }
    ],
    integration_types: [0, 1],
    contexts: [0, 1, 2],
};

// H√†m th·ª±c thi l·ªánh ch√≠nh (execute)
module.exports.execute = async (interaction, client) => {
    
    const type = interaction.options.getString("chon_loai");
    const isWaifu = type === 'waifu';
    
    await interaction.deferReply(); 

    try {
        const result = await fetchRandomCharacter(type);

        const embed = new EmbedBuilder()
            .setColor(isWaifu ? 0xFF69B4 : 0x1E90FF) 
            .setTitle(result.title)
            .setImage(result.url) 
            .setFooter({ text: `Ngu·ªìn: Waifu.pics API (S·ª≠ d·ª•ng endpoint SFW)` });
        
        await interaction.editReply({ embeds: [embed] });

    } catch (error) {
        console.error(`L·ªói khi l·∫•y h√¨nh ·∫£nh ${type}:`, error.message);
        
        await interaction.editReply({
            content: `‚ùå Kh√¥ng th·ªÉ l·∫•y h√¨nh ·∫£nh **${type}** v√†o l√∫c n√†y. L·ªói: ${error.message}`,
            ephemeral: true 
        });
    }
};