const { ApplicationCommandOptionType, EmbedBuilder } = require("discord.js");
const { GoogleGenAI } = require('@google/genai');

// Kh·ªüi t·∫°o GoogleGenAI client (ƒë·∫£m b·∫£o GEMINI_API_KEY ƒë√£ c√≥ trong .env)
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY }); 

// ƒê·ªãnh nghƒ©a d·ªØ li·ªáu l·ªánh (data)
module.exports.data = {
    name: "sua-loi",
    description: "Ph√¢n t√≠ch code ho·∫∑c log l·ªói v√† g·ª£i √Ω c√°ch s·ª≠a b·∫±ng AI.",
    type: 1, 
    
    options: [
        {
            name: "code-va-loi",
            description: "D√°n ƒëo·∫°n code/log l·ªói c·∫ßn ph√¢n t√≠ch (t·ªëi ƒëa 2000 k√Ω t·ª±).",
            type: ApplicationCommandOptionType.String,
            required: true, 
            maxLength: 2000 // Gi·ªõi h·∫°n cho log l·ªói d√†i
        }
    ],
    
    integration_types: [0, 1],
    contexts: [0, 1, 2],
};

// H√†m th·ª±c thi l·ªánh (execute)
module.exports.execute = async (interaction, client) => {
    // 1. L·∫•y n·ªôi dung t·ª´ ng∆∞·ªùi d√πng
    const user_input = interaction.options.getString("code-va-loi"); 
    
    await interaction.deferReply(); // Ph·∫£n h·ªìi t·∫°m th·ªùi

    // 2. X√¢y d·ª±ng Prompt cho AI
    const prompt = `
        B·∫°n l√† m·ªôt tr·ª£ l√Ω l·∫≠p tr√¨nh chuy√™n nghi·ªáp. 
        H√£y ph√¢n t√≠ch ƒëo·∫°n m√£/log l·ªói sau. 
        Nhi·ªám v·ª• c·ªßa b·∫°n l√†: 
        1. Gi·∫£i th√≠ch ng·∫Øn g·ªçn nguy√™n nh√¢n g√¢y ra l·ªói.
        2. ƒê∆∞a ra c√°c b∆∞·ªõc ho·∫∑c ƒëo·∫°n m√£ s·ª≠a l·ªói c·ª• th·ªÉ (d√πng Markdown cho code).
        
        NG√îN NG·ªÆ PH·∫¢N H·ªíI: TI·∫æNG VI·ªÜT
        
        INPUT C·∫¶N PH√ÇN T√çCH:
        ---
        ${user_input}
        ---
    `;

    try {
        // 3. G·ªçi Gemini API
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash", 
            contents: prompt,
        });

        const aiResponseText = response.text.trim();

        // 4. Ki·ªÉm tra ƒë·ªô d√†i v√† g·ª≠i ph·∫£n h·ªìi
        if (aiResponseText.length > 4096) {
            // N·∫øu qu√° d√†i, h√£y g·ª≠i n√≥ th√†nh file ho·∫∑c c·∫Øt ng·∫Øn
            await interaction.editReply({
                content: "K·∫øt qu·∫£ ph√¢n t√≠ch qu√° d√†i (>4096 k√Ω t·ª±). Vui l√≤ng ki·ªÉm tra log bot ƒë·ªÉ xem to√†n b·ªô n·ªôi dung.",
                files: [{ attachment: Buffer.from(aiResponseText), name: 'phan_tich_loi.txt' }]
            });
            return;
        }

        // 5. G·ª≠i Embed k·∫øt qu·∫£
        const embed = new EmbedBuilder()
            .setColor(0x0099ff)
            .setTitle("üî¨ Ph√¢n T√≠ch L·ªói Code/Log b·∫±ng AI")
            .setDescription(aiResponseText)
            .setFooter({ text: `ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi: ${interaction.user.tag} | Powered by Gemini` });

        await interaction.editReply({ embeds: [embed] });

    } catch (error) {
        console.error("L·ªói khi g·ªçi Gemini API:", error);
        await interaction.editReply({
            content: "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng ki·ªÉm tra l·∫°i `GEMINI_API_KEY`.",
            ephemeral: true 
        });
    }
};