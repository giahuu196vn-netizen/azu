const { ApplicationCommandOptionType, EmbedBuilder, PermissionsBitField } = require("discord.js");

// B·ªò L∆ØU TR·ªÆ T√äN C≈®: Map (key: user ID, value: t√™n c≈©)
const nicknameCache = new Map(); 

// Danh s√°ch c√°c bi·ªát danh h√†i h∆∞·ªõc (gi·ªØ nguy√™n)
const funnyNicknames = [
    "Khoai T√¢y L·∫Øc L∆∞", "Th√°nh Nh·ªç C·ªßa NƒÉm", "Si√™u Nh√¢n L∆∞·ªùi Bi·∫øng", 
    "G√£ Kh·ªù C√¢m L·∫∑ng", "C√° Voi Bi·∫øt Bay", "S·∫ßu Ri√™ng H·∫øt H·∫°n", 
    "ƒê·ª©a Tr·∫ª To X√°c", "Ph√∫ √îng Online", "Thi√™n Th·∫ßn M·∫Øc C·∫°n", 
    "ƒê·ªôc Gi·∫£ Chuy√™n Nghi·ªáp"
];

// D·ªØ li·ªáu l·ªánh Slash Command (B·ªè t√πy ch·ªçn 'bi·ªát-danh-c≈©')
module.exports.data = {
    name: "troll-nick",
    description: "ƒê·ªïi bi·ªát danh c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c g·∫Øn th·∫ª th√†nh t√™n ng·∫´u nhi√™n trong 10 gi√¢y v√† t·ª± kh√¥i ph·ª•c.",
    type: 1, 
    
    options: [
        {
            name: "ng∆∞·ªùi-b·ªã-troll",
            description: "G·∫Øn th·∫ª ng∆∞·ªùi b·∫°n mu·ªën ƒë·ªïi bi·ªát danh.",
            type: ApplicationCommandOptionType.User,
            required: true, 
        },
    ],
    
    integration_types: [0, 1],
    contexts: [0, 1, 2],
};

// H√†m th·ª±c thi l·ªánh (execute)
module.exports.execute = async (interaction) => {
    
    if (!interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageNicknames)) {
        return interaction.reply({
            content: "‚ùå Bot thi·∫øu quy·ªÅn **Qu·∫£n l√Ω bi·ªát danh**.",
            ephemeral: true
        });
    }

    const targetUser = interaction.options.getMember("ng∆∞·ªùi-b·ªã-troll"); 

    if (!targetUser || targetUser.user.id === interaction.guild.ownerId || targetUser.user.id === interaction.client.user.id) {
        // X·ª≠ l√Ω l·ªói c∆° b·∫£n
        return interaction.reply({
            content: "‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán v·ªõi ng∆∞·ªùi d√πng n√†y.",
            ephemeral: true
        });
    }
    
    // 1. L∆ØU T√äN C≈® V√ÄO B·ªò NH·ªö
    const oldNickname = targetUser.nickname || targetUser.user.username; // L·∫•y bi·ªát danh ho·∫∑c t√™n ng∆∞·ªùi d√πng
    
    // Ki·ªÉm tra xem ng∆∞·ªùi n√†y c√≥ ƒëang trong qu√° tr√¨nh troll nick kh√¥ng
    if (nicknameCache.has(targetUser.id)) {
        return interaction.reply({
            content: "‚ùå Ng∆∞·ªùi d√πng n√†y hi·ªán ƒëang ƒë∆∞·ª£c troll v√† ch∆∞a kh√¥i ph·ª•c t√™n c≈©. Vui l√≤ng ch·ªù 10 gi√¢y.",
            ephemeral: true
        });
    }
    
    nicknameCache.set(targetUser.id, oldNickname); // L∆∞u t√™n c≈© v√†o cache
    
    // 2. CH·ªåN V√Ä ƒê·ªîI BI·ªÜT DANH M·ªöI
    const newNickname = funnyNicknames[Math.floor(Math.random() * funnyNicknames.length)];
    
    await interaction.deferReply(); 

    try {
        await targetUser.setNickname(newNickname, `Troll bi·ªát danh b·ªüi ${interaction.user.tag}`);

        const trollEmbed = new EmbedBuilder()
            .setColor(0xFFA500)
            .setTitle("üòÇ Bi·ªát Danh T·∫°m Th·ªùi!")
            .setDescription(`Bi·ªát danh c·ªßa **${targetUser.user.tag}** ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh **${newNickname}**! Bot s·∫Ω t·ª± ƒë·ªông kh√¥i ph·ª•c l·∫°i sau **10 gi√¢y**.`);
        
        await interaction.editReply({ embeds: [trollEmbed] });

        // 3. TH·ª∞C HI·ªÜN KH√îI PH·ª§C SAU 10 GI√ÇY
        setTimeout(async () => {
            try {
                // L·∫•y t√™n c≈© t·ª´ cache
                const savedNickname = nicknameCache.get(targetUser.id); 
                
                if (savedNickname !== undefined) {
                    await targetUser.setNickname(savedNickname, "Kh√¥i ph·ª•c bi·ªát danh t·ª± ƒë·ªông");
                    nicknameCache.delete(targetUser.id); // X√≥a kh·ªèi cache sau khi kh√¥i ph·ª•c
                    
                    const restoreEmbed = new EmbedBuilder()
                        .setColor(0x32CD32)
                        .setTitle("‚úÖ Kh√¥i Ph·ª•c Ho√†n T·∫•t")
                        .setDescription(`Bi·ªát danh c·ªßa **${targetUser.user.tag}** ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c v·ªÅ **${savedNickname}**.`);
                    
                    interaction.followUp({ embeds: [restoreEmbed], ephemeral: false }); // Th√¥ng b√°o c√¥ng khai
                }

            } catch (err) {
                console.error("L·ªói khi kh√¥i ph·ª•c bi·ªát danh:", err);
                nicknameCache.delete(targetUser.id); // X√≥a kh·ªèi cache ƒë·ªÉ tr√°nh k·∫πt
            }
        }, 100000); // 10000ms = 10 gi√¢y

    } catch (error) {
        console.error("L·ªói khi ƒë·ªïi bi·ªát danh:", error);
        nicknameCache.delete(targetUser.id); // X√≥a kh·ªèi cache n·∫øu b∆∞·ªõc troll l·ªói
        
        if (error.code === 50013) {
            await interaction.followUp({
                content: `‚ùå L·ªói: Bot kh√¥ng th·ªÉ ƒë·ªïi bi·ªát danh c·ªßa ${targetUser.user.tag} v√¨ vai tr√≤ c·ªßa h·ªç cao h∆°n vai tr√≤ c·ªßa Bot.`,
                ephemeral: true
            });
        } else {
            await interaction.followUp({
                content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán ƒë·ªïi bi·ªát danh.",
                ephemeral: true
            });
        }
    }
};