const { ApplicationCommandOptionType, EmbedBuilder } = require("discord.js");

// H√†m ƒë·ªÉ ƒë∆∞a ra l·ªùi khen ng·∫´u nhi√™n
function getCompliment(username) {
    const compliments = [
        `T·∫•t c·∫£ th√¥ng tin v·ªÅ **${username}** ƒë√£ ƒë∆∞·ª£c thu th·∫≠p. T√¥i l√† bot gi·ªèi nh·∫•t! üòé`,
        `Th·∫≠t vinh d·ª± khi ƒë∆∞·ª£c ph·ª•c v·ª• **${username}**. Th√¥ng tin ƒë√¢y nh√©!`,
        `Ph√¢n t√≠ch d·ªØ li·ªáu ho√†n t·∫•t! **${username}** l√† m·ªôt ng∆∞·ªùi d√πng tuy·ªát v·ªùi! ‚ú®`,
        `T√¥i ƒë√£ t√¨m th·∫•y m·ªçi th·ª© v·ªÅ **${username}** ch·ªâ trong t√≠ch t·∫Øc. Code t√¥i si√™u nhanh! üöÄ`,
        `M√≥n qu√† th√¥ng tin n√†y d√†nh cho **${username}** t·ª´ bot ƒë√°ng tin c·∫≠y c·ªßa b·∫°n. ü§ñ`,
    ];
    return compliments[Math.floor(Math.random() * compliments.length)];
}

module.exports.data = {
    name: "userinfo",
    description: "Xem th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng c·ª• th·ªÉ ho·∫∑c ch√≠nh b·∫°n, bao g·ªìm tin nh·∫Øn g·∫ßn nh·∫•t.",
    type: 1, 
    options: [
        {
            name: "user",
            description: "Ch·ªçn ng∆∞·ªùi d√πng b·∫°n mu·ªën xem th√¥ng tin.",
            type: ApplicationCommandOptionType.User,
            required: false,
        }
    ], 
    integration_types: [0, 1],
    contexts: [0, 1, 2],
};

module.exports.execute = async (interaction, client) => {
    
    const targetUser = interaction.options.getUser("user") || interaction.user;
    const targetMember = interaction.guild.members.cache.get(targetUser.id);
    
    await interaction.deferReply(); 

    // --- LOGIC T√åM TIN NH·∫ÆN G·∫¶N NH·∫§T ---
    let lastMessageInfo = 'Kh√¥ng t√¨m th·∫•y trong 50 tin nh·∫Øn g·∫ßn nh·∫•t c·ªßa k√™nh n√†y.';
    try {
        const messages = await interaction.channel.messages.fetch({ limit: 50 }); 
        const lastUserMessage = messages.find(msg => msg.author.id === targetUser.id);
        
        if (lastUserMessage) {
            const content = lastUserMessage.content.length > 70 ? 
                            lastUserMessage.content.substring(0, 70) + '...' : 
                            lastUserMessage.content || '*Ch·ªâ c√≥ file ƒë√≠nh k√®m/Embed*';

            lastMessageInfo = `
[Xem tin nh·∫Øn](${lastUserMessage.url})
\`\`\`
${content.replace(/`/g, '`\u200b')}
\`\`\`
ƒêƒÉng: <t:${Math.floor(lastUserMessage.createdTimestamp / 1000)}:R>
            `;
        }
    } catch (e) {
        lastMessageInfo = '‚ö†Ô∏è Bot kh√¥ng c√≥ quy·ªÅn ƒë·ªçc l·ªãch s·ª≠ tin nh·∫Øn trong k√™nh n√†y.';
    }
    // --- K·∫æT TH√öC LOGIC T√åM TIN NH·∫ÆN G·∫¶N NH·∫§T ---

    // 1. D·ªØ li·ªáu chung
    const botBadge = targetUser.bot ? 'ü§ñ C√ì' : '‚ùå KH√îNG';
    const createDate = `<t:${Math.floor(targetUser.createdAt.getTime() / 1000)}:f>`;
    const relativeCreateDate = `<t:${Math.floor(targetUser.createdAt.getTime() / 1000)}:R>`;

    // 2. D·ªØ li·ªáu Server (ch·ªâ hi·ªÉn th·ªã n·∫øu l√† th√†nh vi√™n)
    let serverInfoValue = 'Ng∆∞·ªùi d√πng n√†y kh√¥ng c√≤n trong server.';
    let rolesCount = 0;
    let roleList = 'Kh√¥ng c√≥ vai tr√≤ ƒë·∫∑c bi·ªát.';
    let statusInfo = 'KH√îNG R√ï';
    let activitiesInfo = 'Kh√¥ng c√≥ ho·∫°t ƒë·ªông';
    let displayColor = 0x0099ff;

    if (targetMember) {
        const joinDate = `<t:${Math.floor(targetMember.joinedAt.getTime() / 1000)}:f>`;
        const relativeJoinDate = `<t:${Math.floor(targetMember.joinedAt.getTime() / 1000)}:R>`;
        const roles = targetMember.roles.cache
            .filter(role => role.name !== '@everyone')
            .sort((a, b) => b.position - a.position);
        
        rolesCount = roles.size;
        // Lo·∫°i b·ªè Markdown m·∫°nh ƒë·ªÉ tr√°nh l·ªói format
        roleList = roles.map(role => role.toString()).join(', ').substring(0, 1024) || 'Kh√¥ng c√≥';
        
        serverInfoValue = `
**Nickname:** ${targetMember.nickname || 'Kh√¥ng c√≥'}
**Vai Tr√≤ Cao Nh·∫•t:** ${targetMember.roles.highest.name}
**M√†u Hi·ªÉn Th·ªã:** \`${targetMember.displayHexColor}\`
        `;

        const presence = targetMember.presence;
        statusInfo = presence ? presence.status.toUpperCase() : 'KH√îNG R√ï';
        activitiesInfo = presence?.activities.map(a => `**${a.type}:** ${a.name}`).join('\n') || 'Kh√¥ng c√≥ ho·∫°t ƒë·ªông';
        displayColor = targetMember.displayHexColor;
    }


    const userInfoEmbed = new EmbedBuilder()
        .setColor(displayColor) 
        .setTitle(`üë§ TH√îNG TIN CHI TI·∫æT V·ªÄ ${targetUser.username.toUpperCase()}`)
        .setDescription(getCompliment(targetUser.username)) 
        .setThumbnail(targetUser.displayAvatarURL({ dynamic: true, size: 256 }))
        .addFields(
            // ---- D√íNG 1: TH√îNG TIN T√ÄI KHO·∫¢N ----
            { name: 'ID Ng∆∞·ªùi D√πng', value: `\`${targetUser.id}\``, inline: true },
            { name: 'L√† Bot', value: botBadge, inline: true },
            { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·∫Øng 

            { name: 'NG√ÄY T·∫†O T√ÄI KHO·∫¢N', value: createDate, inline: true },
            { name: 'TH·ªúI GIAN', value: relativeCreateDate, inline: true },
            { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·∫Øng
            
            // ---- D√íNG 2: TH√îNG TIN SERVER ----
            { 
                name: 'C·ªòNG ƒê·ªíNG SERVER', 
                value: serverInfoValue, 
                inline: true 
            },
            { 
                name: '\u200B', 
                value: targetMember ? 
                    `
                    **Ng√†y Tham Gia:** ${targetMember ? `<t:${Math.floor(targetMember.joinedAt.getTime() / 1000)}:f>` : 'N/A'}
                    **Th·ªùi Gian:** ${targetMember ? `<t:${Math.floor(targetMember.joinedAt.getTime() / 1000)}:R>` : 'N/A'}
                    `
                    : '\u200B',
                inline: true
            },
            { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·∫Øng

            // ---- D√íNG 3: TR·∫†NG TH√ÅI V√Ä VAI TR√í ----
            { 
                name: 'TR·∫†NG TH√ÅI HO·∫†T ƒê·ªòNG',
                value: `
                    **Tr·∫°ng Th√°i:** **${statusInfo}**
                    **Ho·∫°t ƒê·ªông:** ${activitiesInfo}
                `,
                inline: true
            },
            { 
                name: `VAI TR√í (${rolesCount})`,
                value: rolesCount > 0 ? roleList : 'Kh√¥ng c√≥',
                inline: true 
            },
            { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·∫Øng
            
            // --- D√íNG CU·ªêI: TIN NH·∫ÆN G·∫¶N NH·∫§T ---
            { 
                name: 'üí¨ TIN NH·∫ÆN G·∫¶N NH·∫§T (K√™nh hi·ªán t·∫°i)',
                value: lastMessageInfo,
                inline: false
            }
        )
        .setTimestamp()
        .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` });

    await interaction.editReply({ embeds: [userInfoEmbed] });
};